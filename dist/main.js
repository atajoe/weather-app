(()=>{const e=document.querySelector(".form-group"),t=document.querySelector('input[type="text"]'),i=(document.querySelector("#description"),document.querySelector(".temperature-container")),n=document.querySelector(".further-details"),s=document.querySelector("#city-container"),a=document.querySelector(".city-data"),o=document.getElementById("temperature"),r=document.getElementById("feelslike"),d=document.getElementById("wind"),l=document.getElementById("humidity"),c=document.querySelector(".error");e.addEventListener("keypress",(e=>{"Enter"===e.key&&(e.preventDefault(),console.log("Form submitted!"),async function(e){let u=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&APPID=f578d5af4d16236c8f31a0808db12f43&units=imperial`);var m;if(!1!==function(e){let t=e;return console.log("Display error with response status: ",t),404===t||400===t?(c.style.visibility="visible",!1):(c.style.visibility="hidden",!0)}(u.status))return function(e){let t=e;s.innerHTML=t.name}(m=await u.json()),function(e){let t=e.main.temp;i.style.display="flex",o.innerHTML=t}(m),function(e){let t=e,i=t.main.feels_like,s=t.wind.speed,a=t.main.humidity;n.style.display="flex",r.innerHTML=`Feels like: ${i}`,d.innerHTML=`Wind: ${s} mph`,l.innerHTML=`Humidity: ${a}%`}(m),a.classList.contains("fade-in2")&&i.classList.contains("fade-in2")&&n.classList.contains("fade-in2")&&(a.classList.remove("fade-in2"),i.classList.remove("fade-in2"),n.classList.remove("fade-in2")),a.offsetWidth,i.offsetWidth,n.offsetWidth,a.classList.add("fade-in2"),i.classList.add("fade-in2"),n.classList.add("fade-in2"),void(t.value="")}(e.target.value).catch((e=>console.log(e))))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,